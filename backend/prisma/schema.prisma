generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  name          String
  email         String         @unique
  password      String
  role          Role           @default(STUDENT)
  createdAt     DateTime       @default(now())
  posts         Announcement[] @relation("UserPosts")
  feedbacks     Feedback[]     @relation("UserFeedbacks")
  files         File[]         @relation("UserFiles")
  approvedNotes Note[]         @relation("NoteApprovedBy")
  notes         Note[]         @relation("UserNotes")
  approvedTips  Tip[]          @relation("TipApprovedBy")
  tips          Tip[]          @relation("UserTips")
}

model Subject {
  id       String @id @default(uuid())
  name     String @unique
  branch   String
  semester Int
  notes    Note[]
}

model Note {
  id           String     @id @default(uuid())
  title        String
  branch       String
  semester     Int
  fileUrl      String
  subjectId    String
  uploadedById String
  approvedById String?
  createdAt    DateTime   @default(now())
  feedbacks    Feedback[]
  approvedBy   User?      @relation("NoteApprovedBy", fields: [approvedById], references: [id])
  subject      Subject    @relation(fields: [subjectId], references: [id])
  uploadedBy   User       @relation("UserNotes", fields: [uploadedById], references: [id])
 }

model Tip {
  id           String     @id @default(uuid())
  title        String
  content      String
  status       TipStatus  @default(PENDING)
  createdAt    DateTime   @default(now())
  postedById   String?
  approvedById String?
  feedbacks    Feedback[]
  approvedBy   User?      @relation("TipApprovedBy", fields: [approvedById], references: [id])
  postedBy     User?      @relation("UserTips", fields: [postedById], references: [id])
}

model File {
  id           String   @id @default(uuid())
  url          String
  filename     String
  type         String
  size         Int
  uploadedById String
  createdAt    DateTime @default(now())
  uploadedBy   User     @relation("UserFiles", fields: [uploadedById], references: [id])
}

model Feedback {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  userId    String
  noteId    String?
  tipId     String?
  note      Note?    @relation(fields: [noteId], references: [id])
  tip       Tip?     @relation(fields: [tipId], references: [id])
  user      User     @relation("UserFeedbacks", fields: [userId], references: [id])
}

model Announcement {
  id         String   @id @default(uuid())
  title      String
  message    String
  createdAt  DateTime @default(now())
  postedById String
  postedBy   User     @relation("UserPosts", fields: [postedById], references: [id])
}

model Event {
  id        String   @id @default(uuid())
  title     String
  content   String
  eventDate DateTime
  createdAt DateTime @default(now())
}

enum Role {
  ADMIN
  STUDENT
}

enum TipStatus {
  PENDING
  APPROVED
  REJECTED
}
